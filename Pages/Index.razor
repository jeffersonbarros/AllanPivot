@page "/"
@using System.IO
@using Syncfusion.XlsIO
@using Syncfusion.XlsIO.Implementation
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager 

<PageTitle>AllanPivot</PageTitle>



<div class="container">
    <div class="row">
        <h1>CSV para XLSX e Tabela Dinâmica</h1>
        <div class="col-3">
            <label>Separador de coluna CSV:</label>
        </div>
        <div class="col-1">
            <SfTextBox Placeholder='Separador do CSV' Value="@CSVSeparator" required></SfTextBox>
        </div>

        <br />
        <SfUploader AutoUpload="false" AllowMultiple=false AllowedExtensions=".csv">
            <UploaderEvents ValueChange="OnChange" OnRemove="onRemove"></UploaderEvents>
        </SfUploader>

        <br />
        <br />
        <SfButton Disabled="@disableConvert" OnClick="ConvertToDynamic">Converter para tabela dinâmica</SfButton>

        @if (linkShow)
        {
            <br />
            <br />

               @* <a href="@linkPath">Tabela Dinâmica</a>*@
                <SfButton IsPrimary="true" OnClick="Download">Clique para download</SfButton>

     
        }
    </div>
 </div>





@code {
    private string _fileUploaded;
    private Boolean disableConvert = true;
    private string CSVSeparator = ";";
    private Boolean linkShow = false;
    private string linkPath;

    private void Download()
    {
        NavigationManager.NavigateTo(linkPath, true);
    }

    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            var path =  @"wwwroot/data/" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();

            _fileUploaded = path;

        }
        disableConvert = false;
    }

    private void onRemove(RemovingEventArgs args)
    {
        foreach (var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"wwwroot/data/", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"wwwroot/data/", removeFile.Name));
                disableConvert = true;
            }
        }
    }

    private void ConvertToDynamic()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Excel2016;

            application.PreserveCSVDataTypes = true;
            application.CSVSeparator = CSVSeparator;

            Stream csvStream = File.OpenRead(Path.GetFullPath(_fileUploaded));

            //Lendo o CSV e jogando na planilha base
            IWorkbook workbook = application.Workbooks.Open(csvStream);
            IWorksheet baseSheet = workbook.Worksheets[0];
            baseSheet.Name = "Base";

            //Formatando o CSV como uma tabela
            IListObject table = baseSheet.ListObjects.Create("Base", baseSheet.UsedRange);
            table.BuiltInTableStyle = TableBuiltInStyles.TableStyleMedium6;
            IRange location = table.Location;
            location.AutofitColumns();


            //Aplicando o formato de dinheiro na coluna de total
            IRange columnRange = GetListObjectColumnRange(table, "valortotal");
            if (columnRange != null)
                columnRange.CellStyle.NumberFormat = "R$ #,##0.00";

            // criando a tabela dinamica
            IWorksheet pivotSheet = workbook.Worksheets.Create("Planilha de Vendas");

            IPivotCache cache = workbook.PivotCaches.Add(baseSheet.UsedRange);

            IPivotTable pivotTable = pivotSheet.PivotTables.Add("TabelaDinamica1", pivotSheet["A1"], cache);

            pivotTable.Fields[1].Axis = PivotAxisTypes.Row;
            pivotTable.Fields[1].NumberFormat = "R$ #,##0.00";
            pivotTable.Fields[2].Axis = PivotAxisTypes.Column;
            pivotTable.Fields[2].NumberFormat = "R$ #,##0.00";
            ////Add data field
            IPivotField field = pivotTable.Fields[4];
            field.NumberFormat = "R$ #,##0.00";
            pivotTable.DataFields.Add(field, "Soma de valor total", PivotSubtotalTypes.Sum);

            pivotTable.BuiltInStyle = PivotBuiltInStyles.PivotStyleMedium6;

            Stream excelStream;
            excelStream = File.Create(Path.GetFullPath(@"wwwroot/data/AllanPivotResult.xlsx"));
            workbook.SaveAs(excelStream);
            excelStream.Dispose();
            csvStream.Dispose();
            linkShow = true;
          //  linkPath = "http://localhost:5259/data/AllanPivotResult.xlsx";
            linkPath = "http://177.89.201.70:7272/data/AllanPivotResult.xlsx";
        }
    }

    private static IRange GetListObjectColumnRange(IListObject table, string name)
    {
        IListObjectColumn column = table.Columns.FirstOrDefault(x => x.Name.Contains(name, StringComparison.InvariantCultureIgnoreCase));
        if (column != null)
        {
            IRange location = table.Location;
            return location.Worksheet[location.Row + 1, location.Column + column.Index - 1, location.LastRow, location.Column + column.Index - 1];
        }
        else
            return null;
    }


}